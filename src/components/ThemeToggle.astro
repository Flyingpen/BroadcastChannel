---
import moonIcon from '../assets/moon.svg'
import sunIcon from '../assets/sun.svg'
---

<button id="theme-toggle" class="theme-toggle" aria-label="切换主题" title="切换主题">
  <img id="theme-icon-sun" src={sunIcon.src} alt="明亮模式" class="theme-icon" />
  <img id="theme-icon-moon" src={moonIcon.src} alt="暗色模式" class="theme-icon" />
</button>

<script is:inline>
  function initTheme() {
    const button = document.getElementById('theme-toggle')
    const sunIcon = document.getElementById('theme-icon-sun')
    const moonIcon = document.getElementById('theme-icon-moon')

    if (!button || !sunIcon || !moonIcon) {
      console.error('Theme toggle elements not found')
      return
    }

    // 获取当前主题
    function getCurrentTheme() {
      return document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'
    }

    // 设置主题
    function setTheme(theme) {
      if (theme === 'dark') {
        document.documentElement.setAttribute('data-theme', 'dark')
      } else {
        document.documentElement.removeAttribute('data-theme')
      }
    }

    // 更新图标
    function updateIcon(theme) {
      if (theme === 'dark') {
        sunIcon.classList.remove('active')
        moonIcon.classList.add('active')
      } else {
        sunIcon.classList.add('active')
        moonIcon.classList.remove('active')
      }
    }

    // 切换主题
    function toggleTheme() {
      const currentTheme = getCurrentTheme()
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark'

      setTheme(newTheme)
      updateIcon(newTheme)
      localStorage.setItem('theme', newTheme)
    }

    // 初始化主题
    function initializeTheme() {
      const savedTheme = localStorage.getItem('theme')
      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
      const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light')

      setTheme(initialTheme)
      updateIcon(initialTheme)
    }

    // 绑定事件
    button.addEventListener('click', toggleTheme)

    // 监听系统主题变化
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        const newTheme = e.matches ? 'dark' : 'light'
        setTheme(newTheme)
        updateIcon(newTheme)
      }
    })

    // 初始化
    initializeTheme()
  }

  // 初始化主题切换
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTheme)
  } else {
    initTheme()
  }

  // 处理 Astro 页面转换
  document.addEventListener('astro:page-load', initTheme)
</script>

<style>
  .theme-toggle {
    position: relative;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: background-color 0.2s ease;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-toggle:hover {
    background-color: var(--code-background-color);
  }

  .theme-icon {
    width: 16px;
    height: 16px;
    position: absolute;
    transition:
      opacity 0.2s ease,
      transform 0.2s ease;
    opacity: 0;
    transform: scale(0.8);
    filter: var(--icon-secondary-filter);
  }

  .theme-icon.active {
    opacity: 1;
    transform: scale(1);
  }

  /* 确保图标在不同主题下都能正确显示 */
  [data-theme='dark'] .theme-icon {
    filter: invert(1) var(--icon-secondary-filter);
  }
</style>
