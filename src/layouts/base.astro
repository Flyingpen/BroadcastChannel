---
import { SEO } from 'astro-seo'
import { getConfig } from '../lib/config'
import backToTopIcon from '../assets/back-to-top.svg'

const { SITE_URL, RSS_URL, RSS_PREFIX } = Astro.locals
const { channel } = Astro.props

const locale = getConfig(import.meta.env, Astro, 'LOCALE', 'en')
const themeColor = getConfig(import.meta.env, Astro, 'THEME_COLOR', '#f4f1ec')
const customCSS = getConfig(import.meta.env, Astro, 'CUSTOM_CSS', '')
const customJS = getConfig(import.meta.env, Astro, 'CUSTOM_JS', '')

const seo = channel?.seo
const reqPathname = Astro.url.pathname.replace(/\/$/, '')
const canonical = SITE_URL.startsWith('http') ? new URL(SITE_URL).origin + reqPathname : Astro.url.origin + reqPathname

const { origin, pathname } = new URL(canonical)
const twitter = getConfig(import.meta.env, Astro, 'TWITTER')

const seoParams = {
  title: seo?.title ?? getConfig(import.meta.env, Astro, 'SITE_TITLE'),
  description: seo?.text ?? channel?.description ?? getConfig(import.meta.env, Astro, 'SITE_DESCRIPTION'),
  canonical,
  noindex: seo?.noindex ?? getConfig(import.meta.env, Astro, 'NO_INDEX', false),
  nofollow: seo?.nofollow ?? getConfig(import.meta.env, Astro, 'NO_FOLLOW', false),
  openGraph: {
    basic: {
      type: 'website',
      title: channel?.title ?? getConfig(import.meta.env, Astro, 'SITE_TITLE', ''),
      url: canonical,
      image: channel?.avatar ? channel.avatar : origin + '/favicon.ico',
    },
    optional: {
      description: seo?.text ?? channel?.description ?? getConfig(import.meta.env, Astro, 'SITE_DESCRIPTION'),
      locale,
    },
  },
  extend: {
    link: [
      {
        rel: 'icon',
        href: channel?.avatar
          ? `https://wsrv.nl/?w=64&h=64&fit=cover&mask=circle&url=ssl:${channel?.avatar?.replace(/^https?:\/\//, '')}`
          : '/favicon.svg',
      },
    ],
  },
}

const GOOGLE_SEARCH_SITE = getConfig(import.meta.env, Astro, 'GOOGLE_SEARCH_SITE')
const searchAction = GOOGLE_SEARCH_SITE ? 'https://www.google.com/search' : '/search/result'

const HEADER_INJECT = getConfig(import.meta.env, Astro, 'HEADER_INJECT', '')
const FOOTER_INJECT = getConfig(import.meta.env, Astro, 'FOOTER_INJECT', '')
const TAGS = getConfig(import.meta.env, Astro, 'TAGS')
const LINKS = getConfig(import.meta.env, Astro, 'LINKS')
const navs = (getConfig(import.meta.env, Astro, 'NAVS') || '')
  .split(';')
  .filter(Boolean)
  .map((link) => {
    link = link.split(',')
    return {
      title: link[0]?.trim(),
      href: link[1]?.trim(),
    }
  })

const uiTextConfig = getConfig(import.meta.env, Astro, 'UI_TEXT', '{}')
let uiText = {}
try {
  uiText = typeof uiTextConfig === 'string' ? JSON.parse(uiTextConfig) : uiTextConfig
} catch {
  uiText = {}
}

const defaultUIText = {
  home: '首页',
  tags: '标签',
  links: '友链',
  search: '站内搜索',
  poweredBy: '由以下项目驱动',
}

const finalUIText = { ...defaultUIText, ...uiText }

const navBaseClass =
  'flex w-full items-center justify-between gap-3 rounded-2xl border border-white/20 bg-white/80 px-4 py-2 text-sm font-medium text-slate-600 shadow-inner shadow-white/10 transition hover:-translate-y-0.5 hover:border-brand-400 hover:text-brand-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-400/60 dark:border-white/10 dark:bg-surface-900/70 dark:text-slate-200'
const navActiveClass = 'border-brand-500 bg-brand-500 text-white shadow-glow hover:text-white'
---

<!doctype html>
<html lang={locale ?? 'en'}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content={themeColor} />
    <link rel="alternate" type="application/rss+xml" title={`${RSS_PREFIX}${channel?.title}`} href={RSS_URL} />
    <style is:inline>
      @view-transition {
        navigation: auto;
      }
    </style>
    {customCSS && <style is:inline set:html={customCSS} />}
    <SEO
      titleTemplate={`%s | ${channel?.title}`}
      titleDefault={[channel?.title, seoParams.description].filter(Boolean).join(' - ')}
      twitter={{
        card: 'summary_large_image',
        creator: twitter ? `@${twitter}` : undefined,
      }}
      {...seoParams}
    />
    <Fragment set:html={HEADER_INJECT} />
  </head>

  <body
    id="page-top"
    class="relative overflow-x-hidden bg-transparent text-surface-900 transition-colors duration-500 selection:bg-brand-400/30 selection:text-brand-900 dark:text-slate-100"
  >
    <div
      class="pointer-events-none fixed inset-0 -z-20 bg-gradient-to-br from-surface-50 via-white to-surface-200 opacity-95 dark:from-surface-950 dark:via-surface-900 dark:to-surface-900"
    >
    </div>
    <div
      class="pointer-events-none absolute inset-x-0 top-[-20%] -z-10 mx-auto h-[720px] w-[720px] rounded-full bg-[radial-gradient(circle_at_top,_rgba(255,95,31,0.18),_transparent_55%)] blur-3xl dark:opacity-70"
    >
    </div>
    <div
      class="pointer-events-none absolute bottom-[-15%] right-[-5%] -z-10 h-[520px] w-[520px] rounded-full bg-[radial-gradient(circle_at_bottom,_rgba(59,130,246,0.2),_transparent_60%)] blur-3xl dark:opacity-60"
    >
    </div>

    <div
      class="relative mx-auto flex min-h-screen w-full max-w-7xl flex-col gap-10 px-4 py-10 sm:px-6 lg:flex-row lg:items-start lg:gap-12 lg:px-10"
    >
      <main class="flex-1 space-y-8">
        <slot name="header" />
        <div class="space-y-10">
          <slot />
        </div>
      </main>

      <aside class="lg:sticky lg:top-16 lg:mt-2 lg:max-w-sm lg:self-start">
        <slot name="aside">
          <div class="flex flex-col gap-6">
            <section class="glass-panel space-y-5">
              <div class="flex items-center justify-between">
                <p class="text-xs font-semibold text-slate-500 dark:text-slate-400">导航面板</p>
                <span class="rounded-full bg-brand-500/10 px-3 py-1 text-[10px] font-semibold text-brand-500">即时</span
                >
              </div>
              <nav class="flex flex-col gap-2">
                <a href={SITE_URL} class={`${navBaseClass} ${pathname === '/' ? navActiveClass : ''}`}>
                  <span>{finalUIText.home}</span>
                </a>
                {
                  TAGS ? (
                    <a href={`${SITE_URL}tags`} class={`${navBaseClass} ${pathname === '/tags' ? navActiveClass : ''}`}>
                      <span>{finalUIText.tags}</span>
                    </a>
                  ) : null
                }
                {
                  LINKS ? (
                    <a
                      href={`${SITE_URL}links`}
                      class={`${navBaseClass} ${pathname === '/links' ? navActiveClass : ''}`}
                    >
                      <span>{finalUIText.links}</span>
                    </a>
                  ) : null
                }
                {
                  navs.map((nav) => (
                    <a href={nav.href} target="_blank" rel="noopener" class={`${navBaseClass} group`}>
                      <span>{nav.title}</span>
                      <span class="text-xs font-semibold text-brand-500 transition group-hover:translate-x-px">→</span>
                    </a>

                  ))
                }
              </nav>
            </section>

            <section class="glass-panel space-y-4">
              <p class="text-xs font-semibold text-slate-500 dark:text-slate-400">
                {finalUIText.search}
              </p>
              <form action={searchAction} method="get" class="space-y-3">
                {GOOGLE_SEARCH_SITE ? <input type="hidden" name="as_sitesearch" value={GOOGLE_SEARCH_SITE} /> : null}
                <div class="relative">
                  <span
                    class="pointer-events-none absolute inset-y-0 left-4 flex items-center text-slate-400 dark:text-slate-500"
                  >
                    <svg
                      class="h-4 w-4"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      viewBox="0 0 24 24"
                      aria-hidden="true"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="m21 21-4.35-4.35M10.5 18a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15Z"></path>
                    </svg>
                  </span>
                  <input
                    type="text"
                    name="q"
                    placeholder={finalUIText.search}
                    class="w-full rounded-2xl border border-white/30 bg-white/70 px-11 py-3 text-sm text-slate-700 shadow-inner transition focus:border-brand-400 focus:outline-none focus:ring-2 focus:ring-brand-200/60 dark:border-white/10 dark:bg-surface-900/80 dark:text-slate-200"
                  />
                </div>
                <button
                  type="submit"
                  class="inline-flex w-full items-center justify-center gap-2 rounded-2xl bg-brand-500 px-4 py-2 text-sm font-semibold text-white shadow-glow transition hover:-translate-y-0.5 hover:bg-brand-400"
                >
                  <span>搜索</span>
                </button>
              </form>
            </section>

            <section class="glass-panel space-y-3 text-sm text-slate-500 dark:text-slate-400">
              <p class="text-xs font-semibold text-slate-500 dark:text-slate-400">
                {finalUIText.poweredBy}
              </p>
              <p class="leading-relaxed">
                <a
                  href="https://github.com/ccbikai/BroadcastChannel"
                  class="font-semibold text-brand-500 hover:text-brand-400"
                  target="_blank"
                  rel="noopener"
                >
                  BroadcastChannel
                </a>
                <span class="mx-1">&</span>
                <a
                  href="https://github.com/Planetable/SiteTemplateSepia"
                  class="font-semibold text-brand-500 hover:text-brand-400"
                  target="_blank"
                  rel="noopener"
                >
                  Sepia
                </a>
              </p>
            </section>

            {
              FOOTER_INJECT && (
                <div class="glass-panel text-sm text-slate-500 dark:text-slate-300">
                  <Fragment set:html={FOOTER_INJECT} />
                </div>
              )
            }
          </div>
        </slot>
      </aside>

                  </div>
                ))
              }
            </div>
            <input class="search-icon" name="icon" type="checkbox" placeholder={finalUIText.search} />
            <form class="search-form" action={searchAction} method="get">
              {GOOGLE_SEARCH_SITE ? <input type="hidden" name="as_sitesearch" value={GOOGLE_SEARCH_SITE} /> : null}
              <input type="text" name="q" placeholder={finalUIText.search} />
            </form>
            <div class="copyright-wrap">
              {finalUIText.poweredBy}
              <a
                href="https://github.com/ccbikai/BroadcastChannel"
                title="BroadcastChannel"
                target="_blank"
                rel="noopener"
              >
                BroadcastChannel
              </a> &
              <a href="https://github.com/Planetable/SiteTemplateSepia" title="Sepia" target="_blank" rel="noopener">
                Sepia
              </a>
            </div>
          </slot>
        </div>
      </div>
      
    </div>

    <a href="#page-top" id="back-to-top" aria-label="返回顶部">
      <img {...backToTopIcon} alt="返回顶部" />
    </a>

    {customJS && <script is:inline set:html={customJS} />}
  </body>
</html>
